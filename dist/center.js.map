{"mappings":"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","sources":["src/center.js"],"sourcesContent":["class CenterJS {\n  constructor(canvas) {\n    this.canvas = canvas;\n  }\n\n  generate(options) {\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    /**\n     * Set defaults.\n     */\n    const defaults = {\n      canvas: document.createElement(\"canvas\"),\n      width: 128,\n      height: 128,\n      text: \"C\",\n      fontColor: \"white\",\n      fontFamily: \"Helvetica\",\n      fontSize: 64,\n      fontWeight: \"400\",\n      fontStyle: \"normal\",\n      shape: \"square\",\n      backgroundColor: \"black\",\n    };\n\n    /**\n     * Override defaults with options.\n     */\n    this.data = Object.assign({}, defaults, options);\n    this.width = this.data.width;\n    this.height = this.data.height;\n    this.text = this.data.text;\n    this.fontColor = this.data.fontColor;\n    this.fontFamily = this.data.fontFamily;\n    this.fontSize = this.data.fontSize;\n    this.fontWeight = this.data.fontWeight;\n    this.fontStyle = this.data.fontStyle;\n    this.shape = this.data.shape;\n    this.backgroundColor = this.data.backgroundColor;\n\n    /**\n     * Set the width and height of the canvas as 2x of the desired width and\n     * height. Use the style attribute of the canvas to set the desired width\n     * and height of the canvas then scale the content up by a factor of 2. This\n     * will allow support for retina displays.\n     */\n    this.canvas.width = 2 * this.width;\n    this.canvas.height = 2 * this.height;\n    this.canvas.style.width = this.width + \"px\";\n    this.canvas.style.height = this.height + \"px\";\n    this.ctx.scale(2, 2);\n\n    /**\n     * Draw and return the canvas.\n     */\n    this.drawBackground();\n    this.drawText();\n    return this.canvas;\n  }\n\n  drawBackground() {\n    switch (this.shape) {\n      case \"square\":\n        this.drawSquare();\n        break;\n      case \"circle\":\n        this.drawCircle();\n        break;\n      case \"rounded\":\n        this.drawRounded();\n        break;\n      default:\n        this.drawSquare();\n        break;\n    }\n  }\n\n  drawSquare() {\n    this.ctx.beginPath();\n    this.ctx.rect(0, 0, this.width, this.height);\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawCircle() {\n    this.ctx.beginPath();\n    this.ctx.arc(\n      this.width / 2,\n      this.height / 2,\n      this.height / 2,\n      0,\n      2 * Math.PI,\n      false\n    );\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawRounded() {\n    this.ctx.beginPath();\n    const radius = this.height / 10;\n    this.ctx.moveTo(this.width, this.height);\n    this.ctx.arcTo(0, this.height, 0, 0, radius);\n    this.ctx.arcTo(0, 0, this.width, 0, radius);\n    this.ctx.arcTo(this.width, 0, this.width, this.height, radius);\n    this.ctx.arcTo(this.width, this.height, 0, this.height, radius);\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawText() {\n    this.ctx.fillStyle = this.fontColor;\n    this.ctx.font = this.fontString();\n    this.ctx.textBaseline = \"alphabetic\";\n    this.ctx.textAlign = \"center\";\n    const offsets = this.measureOffsets(\n      this.text,\n      this.fontFamily,\n      this.fontSize\n    );\n    const x = this.width / 2 + offsets.horizontal;\n    const y = this.height / 2 + offsets.vertical;\n    this.ctx.fillText(this.text, x, y);\n  }\n\n  /**\n   * Offsets are the differece between the center of the canvas and the center\n   * of the text on the canvas.\n   */\n  measureOffsets(text, fontFamily, fontSize) {\n    /**\n     * Create and setup canvas\n     */\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.font = this.fontString();\n\n    /**\n     * Make sure that there is enough room on the canvas for the text. Changing\n     * the width or height of a canvas element clears the content so you need\n     * to set the font again.\n     */\n    canvas.width = 2 * ctx.measureText(text).width;\n    canvas.height = 2 * fontSize;\n\n    /**\n     * Center the text vertically and horizontally using the build in canvas\n     * functionality (textBaseline and textAlign). We're going to measure how\n     * far off the text is from the actual center since the textBaseline and\n     * textAlign are not always accurate.\n     */\n    ctx.font = this.fontString();\n    ctx.textBaseline = \"alphabetic\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n    /**\n     * Get image data so that we can iterate of every RGBA pixel.\n     */\n    const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n    let textTop;\n    let textBottom;\n    for (let y = 0; y <= canvas.height; y++) {\n      for (let x = 0; x <= canvas.width; x++) {\n        let r_index = 4 * (canvas.width * y + x);\n        let r_value = data[r_index];\n\n        if (r_value === 255) {\n          if (!textTop) {\n            textTop = y;\n          }\n          textBottom = y;\n          break;\n        }\n      }\n    }\n\n    /**\n     * Vertical offset is the difference between the horizontal center of the\n     * canvas and the horizontal center of the text on the canvas.\n     */\n    const canvasHorizontalCenterLine = canvas.height / 2;\n    const textHorizontalCenterLine = (textBottom - textTop) / 2 + textTop;\n\n    let textLeft;\n    let textRight;\n    for (let x = 0; x <= canvas.width; x++) {\n      for (let y = 0; y <= canvas.height; y++) {\n        let r_index = 4 * (canvas.width * y + x);\n        let r_value = data[r_index];\n\n        if (r_value === 255) {\n          if (!textLeft) {\n            textLeft = x;\n          }\n          textRight = x;\n          break;\n        }\n      }\n    }\n\n    /**\n     * Horizontal offset is the difference between the vertical center of the\n     * canvas and the vertical center of the text on the canvas.\n     */\n    const canvasVerticalCenterLine = canvas.width / 2;\n    const textVerticalCenterLine = (textRight - textLeft) / 2 + textLeft;\n\n    return {\n      vertical: canvasHorizontalCenterLine - textHorizontalCenterLine,\n      horizontal: canvasVerticalCenterLine - textVerticalCenterLine,\n    };\n  }\n\n  fontString() {\n    return `${this.fontStyle} ${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`;\n  }\n}\n\nexport default CenterJS;\n"],"names":[],"version":3,"file":"center.js.map","sourceRoot":"../"}