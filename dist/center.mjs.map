{"mappings":"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","sources":["src/center.js"],"sourcesContent":["class CenterJS {\n  constructor(options) {\n    this.options = options;\n  }\n\n  generate() {\n    /**\n     * Set defaults.\n     */\n    const defaults = {\n      canvas: document.createElement(\"canvas\"),\n      width: 128,\n      height: 128,\n      text: \"C\",\n      fontColor: \"white\",\n      fontFamily: \"Helvetica\",\n      fontSize: 64,\n      fontWeight: \"400\",\n      fontStyle: \"normal\",\n      shape: \"square\",\n      backgroundColor: \"black\",\n    };\n\n    /**\n     * Override defaults with options.\n     */\n    this.data = Object.assign({}, defaults, this.options);\n    this.canvas = this.data.canvas;\n    this.ctx = this.data.canvas.getContext(\"2d\");\n    this.width = this.data.width;\n    this.height = this.data.height;\n    this.text = this.data.text;\n    this.fontColor = this.data.fontColor;\n    this.fontFamily = this.data.fontFamily;\n    this.fontSize = this.data.fontSize;\n    this.fontWeight = this.data.fontWeight;\n    this.fontStyle = this.data.fontStyle;\n    this.shape = this.data.shape;\n    this.backgroundColor = this.data.backgroundColor;\n\n    /**\n     * Set the width and height of the canvas as 2x of the desired width and\n     * height. Use the style attribute of the canvas to set the desired width\n     * and height of the canvas then scale the content up by a factor of 2. This\n     * will allow support for retina displays.\n     */\n    this.canvas.width = 2 * this.width;\n    this.canvas.height = 2 * this.height;\n    this.canvas.style.width = this.width + \"px\";\n    this.canvas.style.height = this.height + \"px\";\n    this.ctx.scale(2, 2);\n\n    /**\n     * Draw and return the canvas.\n     */\n    this.drawBackground();\n    this.drawText();\n    return this.canvas;\n  }\n\n  drawBackground() {\n    switch (this.shape) {\n      case \"square\":\n        this.drawSquare();\n        break;\n      case \"circle\":\n        this.drawCircle();\n        break;\n      case \"rounded\":\n        this.drawRounded();\n        break;\n      default:\n        this.drawSquare();\n        break;\n    }\n  }\n\n  drawSquare() {\n    this.ctx.beginPath();\n    this.ctx.rect(0, 0, this.width, this.height);\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawCircle() {\n    this.ctx.beginPath();\n    this.ctx.arc(\n      this.width / 2,\n      this.height / 2,\n      this.height / 2,\n      0,\n      2 * Math.PI,\n      false\n    );\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawRounded() {\n    this.ctx.beginPath();\n    const radius = this.height / 10;\n    this.ctx.moveTo(this.width, this.height);\n    this.ctx.arcTo(0, this.height, 0, 0, radius);\n    this.ctx.arcTo(0, 0, this.width, 0, radius);\n    this.ctx.arcTo(this.width, 0, this.width, this.height, radius);\n    this.ctx.arcTo(this.width, this.height, 0, this.height, radius);\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fill();\n  }\n\n  drawText() {\n    this.ctx.fillStyle = this.fontColor;\n    this.ctx.font = this.fontString();\n    this.ctx.textBaseline = \"alphabetic\";\n    this.ctx.textAlign = \"center\";\n    const offsets = this.measureOffsets(\n      this.text,\n      this.fontFamily,\n      this.fontSize\n    );\n    const x = this.width / 2 + offsets.horizontal;\n    const y = this.height / 2 + offsets.vertical;\n    this.ctx.fillText(this.text, x, y);\n  }\n\n  /**\n   * Offsets are the differece between the center of the canvas and the center\n   * of the text on the canvas.\n   */\n  measureOffsets(text, fontFamily, fontSize) {\n    /**\n     * Create and setup canvas\n     */\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.font = this.fontString();\n\n    /**\n     * Make sure that there is enough room on the canvas for the text. Changing\n     * the width or height of a canvas element clears the content so you need\n     * to set the font again.\n     */\n    canvas.width = 2 * ctx.measureText(text).width;\n    canvas.height = 2 * fontSize;\n\n    /**\n     * Center the text vertically and horizontally using the build in canvas\n     * functionality (textBaseline and textAlign). We're going to measure how\n     * far off the text is from the actual center since the textBaseline and\n     * textAlign are not always accurate.\n     */\n    ctx.font = this.fontString();\n    ctx.textBaseline = \"alphabetic\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n    /**\n     * Get image data so that we can iterate of every RGBA pixel.\n     */\n    const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n    let textTop;\n    let textBottom;\n    for (let y = 0; y <= canvas.height; y++) {\n      for (let x = 0; x <= canvas.width; x++) {\n        let r_index = 4 * (canvas.width * y + x);\n        let r_value = data[r_index];\n\n        if (r_value === 255) {\n          if (!textTop) {\n            textTop = y;\n          }\n          textBottom = y;\n          break;\n        }\n      }\n    }\n\n    /**\n     * Vertical offset is the difference between the horizontal center of the\n     * canvas and the horizontal center of the text on the canvas.\n     */\n    const canvasHorizontalCenterLine = canvas.height / 2;\n    const textHorizontalCenterLine = (textBottom - textTop) / 2 + textTop;\n\n    let textLeft;\n    let textRight;\n    for (let x = 0; x <= canvas.width; x++) {\n      for (let y = 0; y <= canvas.height; y++) {\n        let r_index = 4 * (canvas.width * y + x);\n        let r_value = data[r_index];\n\n        if (r_value === 255) {\n          if (!textLeft) {\n            textLeft = x;\n          }\n          textRight = x;\n          break;\n        }\n      }\n    }\n\n    /**\n     * Horizontal offset is the difference between the vertical center of the\n     * canvas and the vertical center of the text on the canvas.\n     */\n    const canvasVerticalCenterLine = canvas.width / 2;\n    const textVerticalCenterLine = (textRight - textLeft) / 2 + textLeft;\n\n    return {\n      vertical: canvasHorizontalCenterLine - textHorizontalCenterLine,\n      horizontal: canvasVerticalCenterLine - textVerticalCenterLine,\n    };\n  }\n\n  fontString() {\n    return `${this.fontStyle} ${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`;\n  }\n}\n\nexport default CenterJS;\n"],"names":[],"version":3,"file":"center.mjs.map"}